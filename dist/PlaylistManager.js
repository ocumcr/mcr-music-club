"use strict";export class PlaylistManager{static playlist=[];static defaultOrderPlaylist=[];static currentTrackIndex=-1;static isAvailable(){return this.currentTrackIndex!==-1}static setPlaylist(t,i){this.defaultOrderPlaylist=t,this.playlist=i?this.#t([...t]):t}static setDefaultOrder(){if(this.isAvailable()){const t=this.playlist[this.currentTrackIndex];this.currentTrackIndex=this.defaultOrderPlaylist.indexOf(t)}this.playlist=[...this.defaultOrderPlaylist]}static shufflePlaylist({moveCurrentTrackToTop:t}){if(this.isAvailable()){const i=this.playlist[this.currentTrackIndex];do this.playlist=this.#t([...this.playlist]);while(t&&this.playlist[0]!=i);t&&(this.currentTrackIndex=0)}else this.playlist=this.#t([...this.playlist])}static getCurrentTrackTitle(){return this.isAvailable()?this.playlist[this.currentTrackIndex].title:null}static getNextTrack(){if(!this.isAvailable())return{track:this.playlist[0],index:0};const t=(this.currentTrackIndex+1)%this.playlist.length;return{track:this.playlist[t],index:t}}static getPreviousTrack(){if(!this.isAvailable())return{track:this.playlist[0],index:0};const t=(this.currentTrackIndex-1+this.playlist.length)%this.playlist.length;return{track:this.playlist[t],index:t}}static#t(t){return t.length==1?[...t]:[...t].reduce((i,a,e,s)=>{const l=Math.floor(Math.random()*(e+1));return[s[e],s[l]]=[s[l],a],s})}}
