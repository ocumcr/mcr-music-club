"use strict";import{Record as i}from"./Record.js";import{LocalStorage as c}from"./LocalStorage.js";import{PlaylistManager as r}from"./PlaylistManager.js";import{Content as s}from"./UI/Content.js";import{Header as l}from"./UI/Header.js";export class URLManager{static isDebugMode(){return new URL(window.location.href).searchParams.get("debug")==="true"}static search(e){e===""?this.#r():this.#t(e),this.handleQueryChange()}static handleQueryChange(){console.log("\u30AF\u30A8\u30EA\u30D1\u30E9\u30E1\u30FC\u30BF\u304C\u5909\u66F4\u3055\u308C\u307E\u3057\u305F"),s.fadeIn();const e=r.getCurrentTrackTitle();l.setSearchBox("");const t=this.#e();let o=i.data;t&&(o=i.data.filter(a=>a.tags.includes(t)||a.title.includes(t)||a.author===t),l.setSearchBox(t)),r.setPlaylist(o,c.shuffleMode===1),r.currentTrackIndex=r.playlist.findIndex(a=>a.title===e),s.renderPlaylist(r.playlist),s.updatePlayingClass(r.currentTrackIndex)}static#e(){return new URL(window.location.href).searchParams.get("search")||null}static#t(e){const t=new URL(window.location.href);t.searchParams.set("search",e),window.history.pushState({},"",t)}static#r(){const e=new URL(window.location.href);e.searchParams.delete("search"),window.history.pushState({},"",e)}}window.addEventListener("popstate",n=>{n.preventDefault(),URLManager.handleQueryChange(),console.log("popped")});
